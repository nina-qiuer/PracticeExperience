<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC 
	"-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">  

<mapper namespace="com.tuniu.gt.frm.dao.sqlmap.imap.IRoleUserAttrMap"> 
	<sql id="list">
		<include refid="tuniu.frm.core.IMapBase.fetchListBasic"/>
		<where>
			<if test="priType != null" >
				pri_type = #{priType}
			</if>
			
			<if test="priId != null" >
				and pri_id = #{priId}
			</if>
		</where>
		
		<if test="dataLimitStart != null">
			limit #{dataLimitStart}
			<if test="dataLimitEnd != null">
				,#{dataLimitEnd}
			</if>
		</if>
	</sql>
	<select id="fetchList" parameterType="Map"  resultMap="listResultEntity">
		<include refid="list"/>
	</select>
	<resultMap id="listResultEntity" type="com.tuniu.gt.frm.entity.RoleUserAttrEntity">  
		
		<result property="delFlag" column="del_flag" />
		
		<result property="updateTime" column="update_time" />
		
		<result property="addTime" column="add_time" />
		
		<result property="priType" column="pri_type" />
		
		<result property="priId" column="pri_id" />
		
		<result property="roleId" column="role_id" />
		
	</resultMap>
	
	
	<select id="fetchListMap" parameterType="Map"  resultMap="listResultMap">
		<include refid="list"/>
	</select>
	<resultMap id="listResultMap" type="Map">
		
		<result property="delFlag" column="del_flag"/>
		
		<result property="updateTime" column="update_time"/>
		
		<result property="addTime" column="add_time"/>
		
		<result property="priType" column="pri_type"/>
		
		<result property="priId" column="pri_id"/>
		
		<result property="roleId" column="role_id"/>
		
	</resultMap>
	
	
	<select id="get" parameterType="Map"  resultMap="listResultEntity">
		<include refid="tuniu.frm.core.IMapBase.fetchListBasic"/>
		where id=#{id} limit 1 
	</select>
	
	
	<sql id="insert">
		<include refid="tuniu.frm.core.IMapBase.insertBasic"/>
		(
		  del_flag,
		 
		  update_time,
		 
		  add_time,
		 
		  pri_type,
		 
		  pri_id,
		 
		  role_id
		 
		) values  (
		
		  #{e.delFlag}, 
		 
		  #{e.updateTime}, 
		 
		  #{e.addTime}, 
		 
		  #{e.priType}, 
		 
		  #{e.priId}, 
		 
		  #{e.roleId} 
		 
		)  ON DUPLICATE KEY UPDATE update_time= #{e.updateTime}
	</sql>
		
	<insert id="insert" useGeneratedKeys="true" keyProperty="id" parameterType="Map" flushCache="true" statementType="PREPARED" > 
		<include refid="insert"/>
	</insert>
	
	<sql id="update">
		<include refid="tuniu.frm.core.IMapBase.updateBasic"/>
		<set>  
			
				<if test="e.delFlag != null">del_flag=#{e.delFlag},</if>
			
				<if test="e.updateTime != null">update_time=#{e.updateTime},</if>
			
				<if test="e.addTime != null">add_time=#{e.addTime},</if>
			
				<if test="e.priType != null">pri_type=#{e.priType},</if>
			
				<if test="e.priId != null">pri_id=#{e.priId},</if>
			
				<if test="e.roleId != null">role_id=#{e.roleId}</if>
			
		</set>
	    where id=#{e.id}
	</sql>	
	
	
	<update id="update" parameterType="Map" flushCache="true" statementType="PREPARED">
		<include refid="update"/>
	</update>
	
	
	<sql id="delete">
		<include refid="tuniu.frm.core.IMapBase.deleteBasic"/>
	</sql>
	
	<delete id="delete">
		<include refid="delete"/> 
		  <where>
		 
		  <if test="priId != null">
		  	pri_id = #{priId}
		  </if>
		  
		  <if test="priType != null">
		  	and pri_type=#{priType}
		  </if>
		  
		  <if test="notRoleIds != null">
		  	and role_id not in(#{notRoleIds}) 
		  </if>
		  </where> 
	</delete>
</mapper>
